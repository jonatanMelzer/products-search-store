{"ast":null,"code":"import { computed } from '@angular/core';\nexport function selectSignal(...args) {\n  const selectSignalArgs = [...args];\n  const config = typeof selectSignalArgs[selectSignalArgs.length - 1] === 'object' ? selectSignalArgs.pop() : {\n    equal: defaultEqualityFn\n  };\n  const projector = selectSignalArgs.pop();\n  const signals = selectSignalArgs;\n  const computation = signals.length === 0 ? projector : () => {\n    const values = signals.map(signal => signal());\n    return projector(...values);\n  };\n  return computed(computation, config);\n}\nexport function defaultEqualityFn(previous, current) {\n  return previous === current;\n}","map":{"version":3,"names":["computed","selectSignal","args","selectSignalArgs","config","length","pop","equal","defaultEqualityFn","projector","signals","computation","values","map","signal","previous","current"],"sources":["/home/jonatanMelzer/products-search-store/src/lib/select-signal.ts"],"sourcesContent":["import { computed, Signal, ValueEqualityFn } from '@angular/core';\n\nexport type SelectSignalConfig<T> = { equal: ValueEqualityFn<T> };\n\nexport function selectSignal<Result>(\n  projector: () => Result,\n  config?: SelectSignalConfig<Result>\n): Signal<Result>;\nexport function selectSignal<Signals extends Signal<any>[], Result>(\n  ...args: [\n    ...signals: Signals,\n    projector: (\n      ...values: {\n        [K in keyof Signals]: Signals[K] extends Signal<infer Value>\n          ? Value\n          : never;\n      }\n    ) => Result\n  ]\n): Signal<Result>;\nexport function selectSignal<Signals extends Signal<any>[], Result>(\n  ...args: [\n    ...signals: Signals,\n    projector: (\n      ...values: {\n        [K in keyof Signals]: Signals[K] extends Signal<infer Value>\n          ? Value\n          : never;\n      }\n    ) => Result,\n    config: SelectSignalConfig<Result>\n  ]\n): Signal<Result>;\nexport function selectSignal<Result>(...args: unknown[]): Signal<Result> {\n  const selectSignalArgs = [...args];\n\n  const config: SelectSignalConfig<Result> =\n    typeof selectSignalArgs[selectSignalArgs.length - 1] === 'object'\n      ? (selectSignalArgs.pop() as SelectSignalConfig<Result>)\n      : { equal: defaultEqualityFn };\n  const projector = selectSignalArgs.pop() as (...values: unknown[]) => Result;\n  const signals = selectSignalArgs as Signal<unknown>[];\n\n  const computation =\n    signals.length === 0\n      ? projector\n      : () => {\n          const values = signals.map((signal) => signal());\n          return projector(...values);\n        };\n\n  return computed(computation, config);\n}\n\nexport function defaultEqualityFn<T>(previous: T, current: T): boolean {\n  return previous === current;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAiC,eAAe;AAiCjE,OAAM,SAAUC,YAAYA,CAAS,GAAGC,IAAe;EACrD,MAAMC,gBAAgB,GAAG,CAAC,GAAGD,IAAI,CAAC;EAElC,MAAME,MAAM,GACV,OAAOD,gBAAgB,CAACA,gBAAgB,CAACE,MAAM,GAAG,CAAC,CAAC,KAAK,QAAQ,GAC5DF,gBAAgB,CAACG,GAAG,EAAiC,GACtD;IAAEC,KAAK,EAAEC;EAAiB,CAAE;EAClC,MAAMC,SAAS,GAAGN,gBAAgB,CAACG,GAAG,EAAsC;EAC5E,MAAMI,OAAO,GAAGP,gBAAqC;EAErD,MAAMQ,WAAW,GACfD,OAAO,CAACL,MAAM,KAAK,CAAC,GAChBI,SAAS,GACT,MAAK;IACH,MAAMG,MAAM,GAAGF,OAAO,CAACG,GAAG,CAAEC,MAAM,IAAKA,MAAM,EAAE,CAAC;IAChD,OAAOL,SAAS,CAAC,GAAGG,MAAM,CAAC;EAC7B,CAAC;EAEP,OAAOZ,QAAQ,CAACW,WAAW,EAAEP,MAAM,CAAC;AACtC;AAEA,OAAM,SAAUI,iBAAiBA,CAAIO,QAAW,EAAEC,OAAU;EAC1D,OAAOD,QAAQ,KAAKC,OAAO;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}